//
// DoneView.swift
// Generated by Core Animator version 1.5.3 on 1/6/19.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _DonePassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class DoneView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1500, height: 1500))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1500, height:1500)
		__scaling__.center = CGPoint(x:750.0, y:750.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let line93__root = _DonePassthroughView()
		let line93__xScale = _DonePassthroughView()
		let line93__yScale = _DonePassthroughView()
		let line93 = UIImageView()
		let imgLine93 = UIImage(named:"Line 93.png", in: bundle, compatibleWith: nil)
		if imgLine93 == nil {
			print("** Warning: Could not create image from 'Line 93.png'")
		}
		line93.image = imgLine93
		line93.contentMode = .center
		line93.bounds = CGRect(x:0, y:0, width:104.0, height:104.0)
		line93__root.layer.position = CGPoint(x:769.838, y:749.594)
		line93__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		line93__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		line93__root.transform = CGAffineTransform(rotationAngle: 5.506)
		line93__root.addSubview(line93__xScale)
		line93__xScale.addSubview(line93__yScale)
		line93__yScale.addSubview(line93)
		__scaling__.addSubview(line93__root)
		viewsByName["Line 93__root"] = line93__root
		viewsByName["Line 93__xScale"] = line93__xScale
		viewsByName["Line 93__yScale"] = line93__yScale
		viewsByName["Line 93"] = line93

		let line92__root = _DonePassthroughView()
		let line92__xScale = _DonePassthroughView()
		let line92__yScale = _DonePassthroughView()
		let line92 = UIImageView()
		let imgLine92 = UIImage(named:"Line 92.png", in: bundle, compatibleWith: nil)
		if imgLine92 == nil {
			print("** Warning: Could not create image from 'Line 92.png'")
		}
		line92.image = imgLine92
		line92.contentMode = .center
		line92.bounds = CGRect(x:0, y:0, width:66.0, height:66.0)
		line92__root.layer.position = CGPoint(x:719.103, y:764.947)
		line92__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		line92__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		line92__root.transform = CGAffineTransform(rotationAngle: 5.422)
		line92__root.addSubview(line92__xScale)
		line92__xScale.addSubview(line92__yScale)
		line92__yScale.addSubview(line92)
		__scaling__.addSubview(line92__root)
		viewsByName["Line 92__root"] = line92__root
		viewsByName["Line 92__xScale"] = line92__xScale
		viewsByName["Line 92__yScale"] = line92__yScale
		viewsByName["Line 92"] = line92

		self.viewsByName = viewsByName
	}

	// - MARK: Check

	func addCheckAnimation() {
        addCheckAnimation(beginTime: 0, fillMode: CAMediaTimingFillMode.both.rawValue, removedOnCompletion: false, completion: nil)
	}

	func addCheckAnimation(completion: ((Bool) -> Void)?) {
        addCheckAnimation(beginTime: 0, fillMode: CAMediaTimingFillMode.both.rawValue, removedOnCompletion: false, completion: completion)
	}

	func addCheckAnimation(removedOnCompletion: Bool) {
        addCheckAnimation(beginTime: 0, fillMode: removedOnCompletion ? CAMediaTimingFillMode.removed.rawValue : CAMediaTimingFillMode.both.rawValue, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCheckAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addCheckAnimation(beginTime: 0, fillMode: removedOnCompletion ? CAMediaTimingFillMode.removed.rawValue : CAMediaTimingFillMode.both.rawValue, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCheckAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let linearTiming = CAMediaTimingFunction(name: CAMediaTimingFunctionName.linear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Check")
			self.animationCompletions[layer.animation(forKey: "Check")!] = complete
		}

		let line92ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		line92ScaleYAnimation.duration = 0.500
		line92ScaleYAnimation.values = [0.005, -1.006, -1.006] as [Float]
		line92ScaleYAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line92ScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		line92ScaleYAnimation.beginTime = beginTime
        line92ScaleYAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line92ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 92__yScale"]?.layer.add(line92ScaleYAnimation, forKey:"Check_ScaleY")

		let line92TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		line92TranslationXAnimation.duration = 0.500
		line92TranslationXAnimation.values = [-24.906, 0.431, 0.431] as [Float]
		line92TranslationXAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line92TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		line92TranslationXAnimation.beginTime = beginTime
        line92TranslationXAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line92TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 92__root"]?.layer.add(line92TranslationXAnimation, forKey:"Check_TranslationX")

		let line92TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		line92TranslationYAnimation.duration = 0.500
		line92TranslationYAnimation.values = [-21.378, 0.370, 0.370] as [Float]
		line92TranslationYAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line92TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		line92TranslationYAnimation.beginTime = beginTime
        line92TranslationYAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line92TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 92__root"]?.layer.add(line92TranslationYAnimation, forKey:"Check_TranslationY")

		let line93ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		line93ScaleXAnimation.duration = 0.500
		line93ScaleXAnimation.values = [0.006, 0.000, -1.010] as [Float]
		line93ScaleXAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line93ScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		line93ScaleXAnimation.beginTime = beginTime
        line93ScaleXAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line93ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 93__xScale"]?.layer.add(line93ScaleXAnimation, forKey:"Check_ScaleX")

		let line93TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		line93TranslationXAnimation.duration = 0.500
		line93TranslationXAnimation.values = [-36.839, -35.298, 0.831] as [Float]
		line93TranslationXAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line93TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		line93TranslationXAnimation.beginTime = beginTime
        line93TranslationXAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line93TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 93__root"]?.layer.add(line93TranslationXAnimation, forKey:"Check_TranslationX")

		let line93TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		line93TranslationYAnimation.duration = 0.500
		line93TranslationYAnimation.values = [36.223, 34.708, -0.817] as [Float]
		line93TranslationYAnimation.keyTimes = [0.000, 0.400, 1.000] as [NSNumber]
		line93TranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		line93TranslationYAnimation.beginTime = beginTime
        line93TranslationYAnimation.fillMode = CAMediaTimingFillMode(rawValue: fillMode)
		line93TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Line 93__root"]?.layer.add(line93TranslationYAnimation, forKey:"Check_TranslationY")
	}

	func removeCheckAnimation() {
		self.layer.removeAnimation(forKey: "Check")
		self.viewsByName["Line 92__yScale"]?.layer.removeAnimation(forKey: "Check_ScaleY")
		self.viewsByName["Line 92__root"]?.layer.removeAnimation(forKey: "Check_TranslationX")
		self.viewsByName["Line 92__root"]?.layer.removeAnimation(forKey: "Check_TranslationY")
		self.viewsByName["Line 93__xScale"]?.layer.removeAnimation(forKey: "Check_ScaleX")
		self.viewsByName["Line 93__root"]?.layer.removeAnimation(forKey: "Check_TranslationX")
		self.viewsByName["Line 93__root"]?.layer.removeAnimation(forKey: "Check_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Check")
	}
}
